******************************
*          정규식              *
******************************

* 분류

^ : 문자열의 시작
$ : 문자열의 종료
. : 임의의 한 문자
* : 앞의 문자가 0개 ~ 여러 개 있음
    ex) [a-z]* 소문자 알파벳을 0개 ~여러 개 입력 가능
        .* 임의의 문자를 0개 ~ 여러 개 입력 가능
+ : 앞의 문자가 1개 ~ 여러 개
    ex) .+ 임의의 문자를 1개 ~ 여러 개 입력 가능
? : 앞의 문자가 0개 ~ 1개 있음
    ex) .? 임의의 문자를 0개 ~ 1개 입력할 수 있음
        \.? .문자를 0개 ~ 1개 입력할 수 있음
[] : 문자의 집합이나 범위 안에 속한 한 개의 문자를 표현할 때 사용한다.
     범위를 나타낼 땐 - 기호를 사용하며 ^문자를 앞에 붙여 부정을 표현 할 수 있다.
    ex) [a-z&&[^u-x]] 소문자 알파벳 중 u~x를 제외한 나머지 알파벳 입력 가능
{} : 앞 문자의 횟수를 나타낸다.
    ex) .{3,8} 임의의 문자를 3자에서 8자 사이로 입력해야 한다.
        [a-z]{3,} 소문자 알파벳 3자 이상 입력해야 한다.
() : ()는 여러 개의 문자를 하나의 덩어리로 인식한다.
    ex) (Mon|Tues|Fri)day Monday, Tuesday, Friday를 입력할 수 있습니다.
        (([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])?
        00:00:00 ~ 23:59:59 형식으로 입력하거나 빈값을 입력할 수 있다.
| : 패턴 안에서 OR 연산을 수행합니다.
\w : 숫자, 알파벳, _문자
\W : \w를 제외한 문자
\d : 숫자 (0~9)
\D : \d를 제외한 문자
\s : 공백 문자 (\t\n\x\B\f\r)
\S : \s를 제외한 문자
\b : 공백을 기준으로 단어를 찾는다. (문자열 검색을 위해 사용되는 듯)
    ex) cat\b cat으로 끝나는 단어를 검색한다.
        like : cat concat
\B : \b와 반대
\ : .이나 +같이 정규 표현식 문자를 문자로 표현하기 위해 문자 앞에 \를 붙여줘야 한다.
    ex) \. \+

* 활용법

------------------
|       JAVA     |
------------------

Pattern pattern = Pattern.compile("[\\w!@#$]{8,13});
Matcher matcher = Pattern.matcher("dasdqw_e#"); //true
...


